//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : StateMachine.sm
//

#ifndef STATEMACHINE_SM_H
#define STATEMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Stopped;
class Map1_Playing;
class Map1_Default;
class StateMachineState;
class StateMachineContext;
class StateMachine;

class StateMachineState :
    public statemap::State
{
public:

    StateMachineState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(StateMachineContext&) {};
    virtual void Exit(StateMachineContext&) {};

    virtual void Button1Pressed(StateMachineContext& context);
    virtual void Button2Pressed(StateMachineContext& context);
    virtual void Button3Pressed(StateMachineContext& context);

protected:

    virtual void Default(StateMachineContext& context);
};

class Map1
{
public:

    static Map1_Stopped Stopped;
    static Map1_Playing Playing;
};

class Map1_Default :
    public StateMachineState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : StateMachineState(name, stateId)
    {};

};

class Map1_Stopped :
    public Map1_Default
{
public:
    Map1_Stopped(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Button1Pressed(StateMachineContext& context);
    virtual void Button2Pressed(StateMachineContext& context);
    virtual void Button3Pressed(StateMachineContext& context);
};

class Map1_Playing :
    public Map1_Default
{
public:
    Map1_Playing(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Button1Pressed(StateMachineContext& context);
    virtual void Button2Pressed(StateMachineContext& context);
    virtual void Button3Pressed(StateMachineContext& context);
};

class StateMachineContext :
    public statemap::FSMContext
{
public:

    explicit StateMachineContext(StateMachine& owner)
    : FSMContext(Map1::Stopped),
      _owner(owner)
    {};

    StateMachineContext(StateMachine& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline StateMachine& getOwner()
    {
        return (_owner);
    };

    inline StateMachineState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<StateMachineState&>(*_state);
    };

    inline void Button1Pressed()
    {
        getState().Button1Pressed(*this);
    };

    inline void Button2Pressed()
    {
        getState().Button2Pressed(*this);
    };

    inline void Button3Pressed()
    {
        getState().Button3Pressed(*this);
    };

private:
    StateMachine& _owner;
};


#endif // STATEMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
