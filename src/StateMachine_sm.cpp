//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : StateMachine.sm
//

#include "StateMachine.h"
#include "../StateMachine_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Stopped Map1::Stopped("Map1::Stopped", 0);
Map1_Playing Map1::Playing("Map1::Playing", 1);

void StateMachineState::Button1Pressed(StateMachineContext& context)
{
    Default(context);
}

void StateMachineState::Button2Pressed(StateMachineContext& context)
{
    Default(context);
}

void StateMachineState::Button3Pressed(StateMachineContext& context)
{
    Default(context);
}

void StateMachineState::Default(StateMachineContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Stopped::Button1Pressed(StateMachineContext& context)
{
    StateMachine& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.StartPlaying();
        context.setState(Map1::Playing);
    }
    catch (...)
    {
        context.setState(Map1::Playing);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Stopped::Button2Pressed(StateMachineContext& context)
{


}

void Map1_Stopped::Button3Pressed(StateMachineContext& context)
{


}

void Map1_Playing::Button1Pressed(StateMachineContext& context)
{
    StateMachine& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.StopPlaying();
        context.setState(Map1::Stopped);
    }
    catch (...)
    {
        context.setState(Map1::Stopped);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Playing::Button2Pressed(StateMachineContext& context)
{
    StateMachine& ctxt = context.getOwner();

    StateMachineState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.ChannelUp();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void Map1_Playing::Button3Pressed(StateMachineContext& context)
{
    StateMachine& ctxt = context.getOwner();

    StateMachineState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.ChannelDown();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
